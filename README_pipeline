Computational pipeline for variant calling and filtering: Human RNA editing sites identified from RNA sequencing data alone

Getting Ready:
Step 1. download necessary files from UCSC browser: hg19 genome (make sure to get ALL the chromosomes), Refseq, UCSC, Gencode, Ensembl gene annotation files, hg19 repeat masker, dbSNP135 (remove SNPs of "cDNA" molecular type)
Step 2. download variant calls from 1000 genomes project and UW exome sequencing project
Step 3. download required software: samtools, bedtools, command line blat, perl, bwa, GATK, picardtools

Mapping reads:
Step 1. concatenate splice junction sequence file (hg19_junctionseqs_75bp.fa is provided as an example) with hg19 genome
Step 2. Create bwa index for this concatenated file
Step 3. Map reads with bwa as single end sequences to this reference file
Step 4. use Picard MarkDuplicates to remove duplicate reads
Step 5. convert the position of reads that map across splicing junctions onto the genome: java -Xmx2g convertCoordinates < in.sam > out.sam
Step 6. filter out unmapped reads and reads with mapping quality < 20 with samtools
Step 7. Index this alignment file with samtools
Step 8. Perform indel realignment and base quality score recalibration using IndelRealigner, CountCovariates, and TableRecalibration in GATK 

Call/filter Variants:
Step 1. Initial variant calling with GATK UnifiedGenotyper: options of -stand_call_conf 0 -stand_emit_conf 0
Step 2. Convert VCF format to our custom variant format: Convert_VCF.pl in.vcf out.txt
Step 2. Use bedtools to filter out candidates that overlap with dbSNP/1000 genomes/UW exome calls
Step 3. Remove mismatches in first 6 bp of reads: perl Remove_mismatch_first6bp.pl in.Candidates.txt in.bam out.Candidates.txt
Step 4. Use bedtools to separate candidates in Alu and non-Alu regions of the genome

Further filtering of non-Alu candidates:
Step 1. Use bedtools to filter candidates that are in simple repeats
Step 2. Filter intronic candidates that are within 4 bp of splicing junctions: perl Filter_intron_near_splicejuncts.pl in.Candidates.txt GeneAnnotationFile > out.Candidates.txt
Step 3. Filter candidates in homopolyer runs: perl RemoveHomoNucleotides.pl in.Candidates.txt out.Candidates.txt
Step 4. Use BLAT to ensure unique mapping: perl BLAT_candidates.pl in.Candidates.txt in.bam out.Candidates.txt
Step 5. Use bedtools to separate out candidates in repetitive non-Alu and nonrepetitive regions of the genome
